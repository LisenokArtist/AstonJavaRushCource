/*
 * This source file was generated by the Gradle 'init' task
 */
package module;

import org.junit.jupiter.api.Test;

import module.Core.Strategy.*;
import module.Core.ChainOfResponsibility.*;
import module.Core.ChainOfResponsibility.MessageSender.PriorityLevel;
import module.Core.Builder.IntBuilder;
import module.Core.Proxy.ServerStatusProxy;
import module.Core.Decorator.Decorator.Options.*;
import module.Core.Decorator.Service.*;
import module.Core.Decorator.Service.Services.*;
import module.Core.Adapter.*;

import java.io.PrintStream;
import java.nio.charset.StandardCharsets;

class AppTest {
    @Test void strategyTest(){
        System.setOut(new PrintStream(System.out, true, StandardCharsets.UTF_8));

        Plane[] planes = {
            new Plane("Обычный самолет"),
            new RCElectricPlane("Электрический радиоуправляемый самолет"),
            new PaperPlane("Бумажный самолет")
        };

        for (Plane plane : planes) {
            plane.getName();
            plane.fill();
            plane.fly();
            System.out.println("\n");
        }
    }

    /*
    * Лично не встречался с задачами такого рода,
    * потому особо не старался придумать что-то
    * свое, а реализовал то, что нашел в сети
    */
    @Test void chainOfResponsibilityTest(){
        System.setOut(new PrintStream(System.out, true, StandardCharsets.UTF_8));

        LogReportMessageSender log = new LogReportMessageSender(PriorityLevel.LOW);
        EmailMessageSender email = new EmailMessageSender(PriorityLevel.MIDDLE);
        SMSMessageSender sms = new SMSMessageSender(PriorityLevel.HIGH);

        log.setNextSender(email);
        email.setNextSender(sms);

        log.send("Low priority", PriorityLevel.LOW);
        log.send("Middle priority", PriorityLevel.MIDDLE);
        log.send("High priority", PriorityLevel.HIGH);
    }

    @Test void builderTest(){
        System.setOut(new PrintStream(System.out, true, StandardCharsets.UTF_8));
        
        IntBuilder builder = new IntBuilder();
        builder.plus(8);
        builder.minus(1);
        builder.power(10);
        builder.divide(2);
        System.out.println(builder.toInt());
    }

    @Test void proxyTest() throws InterruptedException{
        System.setOut(new PrintStream(System.out, true, StandardCharsets.UTF_8));

        ServerStatusProxy status = new ServerStatusProxy();
        status.setTimeSecondsOffset(5);
        
        status.update();
        Thread.sleep(1 * 1000);

        status.update();
        Thread.sleep(6 * 1000);

        status.update();
    }

    @Test void decoratorTest(){
        //Ремонтируем космический корабль
        Service repairing = new Repairing("Bridge\n", 1200);
        Service fullMaintance = new HullMaintanceOption(repairing);
        Service important = new ImportantSystemsMaintanceOption(fullMaintance);
    
        System.err.println(important.getLabel() + important.getPrice() + " credits total");
    }

    /*
     * Не совсем помню, что сталкивался с
     * таким паттерном лично, потому
     * не стал ничего придумывать
     */
    @Test void adapterTest(){
        USB cardReader = new CardReader(new MicroSD());
        cardReader.connectWithUsbCable();
    }
}
